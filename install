#!/usr/bin/python

# Python 2.7 syntax

from __future__ import (
    print_function, unicode_literals, division, absolute_import)
import subprocess
import re
import argparse
import os
import sys
from plistlib import writePlist
from collections import OrderedDict
import shutil
import errno

def yes_no(message):
    while True:
        response = raw_input('{} (y/n) [y]: '.format(message))
        if response in ('y', 'n', ''):
            return response != 'n'
        print('Please answer y or n.')

arg_parser = argparse.ArgumentParser(
    description='CrashPlan network monitor installer')
arg_parser.add_argument(
    '--interface', default='en1',
    help='network interface to check [default: %(default)s]')
# We do want os.getlogin() here, because we want the name of the *standard*
# user (not root) who is using CrashPlan. This is the user to which we will
# send our notifications and on whose behalf we will start the menu bar.
arg_parser.add_argument(
    '--user', default=os.getlogin(),
    help='name of standard CrashPlan user [default: %(default)s]')
arg_parser.add_argument('--interval', default=1, type=int,
                        help='minutes between runs [default: %(default)s]')
arg_parser.add_argument('ssid', help='Wi-Fi network name on which to disable')

args = arg_parser.parse_args()

if os.getuid() != 0:
    sys.exit('The install script must be run as root.')

DOMAIN = 'com.seanfisk.crashplan-network-monitor'
PLIST_INSTALL_PATH = '/Library/LaunchDaemons/{}.plist'.format(DOMAIN)
LOGFILE_PATH = '/Library/Logs/{}.log'.format(DOMAIN)
EXE_BASE = 'crashplan-network-monitor'
EXE_INSTALL_DIR = '/usr/libexec'
EXE_INSTALL_PATH = os.path.join(EXE_INSTALL_DIR, EXE_BASE)

print('Plist will be installed to:', PLIST_INSTALL_PATH)
print('Executable will be installed to:', EXE_INSTALL_PATH)
print('Log will be written to:', LOGFILE_PATH)
print()

if not yes_no('Is this ok?'):
    sys.exit('Exiting without installing.')

try:
    os.makedirs(EXE_INSTALL_DIR)
except OSError as exc:
    if exc.errno != errno.EEXIST:
        raise
shutil.copyfile(EXE_BASE, EXE_INSTALL_PATH)
os.chmod(EXE_INSTALL_PATH, 0o755)
writePlist(
    OrderedDict([
        ('Label', DOMAIN),
        ('ProgramArguments', [
            EXE_INSTALL_PATH, args.user, args.interface, args.ssid]),
        ('StartInterval', args.interval * 60),
        ('StandardErrorPath', LOGFILE_PATH)
    ]),
    PLIST_INSTALL_PATH)
os.chmod(PLIST_INSTALL_PATH, 0o644)

print('Installed. Loading daemon...')

def launchctl(*args):
    with open(os.devnull, 'wb') as devnull:
        subprocess.check_call(['/bin/launchctl'] + list(args),
                              stdout=devnull, stderr=devnull)

try:
    launchctl('list', DOMAIN)
except subprocess.CalledProcessError:
    pass
else:
    if yes_no('Daemon is already loaded. Reload?'):
        launchctl('unload', PLIST_INSTALL_PATH)
        print('Daemon unloaded.')
    else:
        print('Exiting without reloading.')
        sys.exit()

launchctl('load', PLIST_INSTALL_PATH)

print('Daemon loaded.')
